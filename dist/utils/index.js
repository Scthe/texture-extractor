export function assertUnreachable(t){throw new Error("Didn't expect to get here")}export function cancelEvent(t){return t.stopPropagation(),!1}export const clamp=(t,o,r)=>Math.min(r,Math.max(o,t)),add2d=(t,o)=>({x:t.x+o.x,y:t.y+o.y}),sub2d=(t,o)=>({x:t.x-o.x,y:t.y-o.y}),mul2d=(t,o)=>({x:t.x*o,y:t.y*o}),midpoint2d=(t,o)=>({x:(t.x+o.x)/2,y:(t.y+o.y)/2}),between2d=(t,o,r)=>({x:t.x+(o.x-t.x)*r,y:t.y+(o.y-t.y)*r});const n=t=>`${t.x}, ${t.y}`;export const svgLinePath=(t,o)=>`M ${n(t)} L ${n(o)}`,svgPolygonPoints=(...t)=>t.map(n).join(" "),hexAsSvgColor=t=>`%23${t.substring(1)}`;function s(t){if(t.aborted)throw new DOMException("AbortError","AbortError")}export async function abortable(t,o){return s(t),Promise.race([o,new Promise((r,e)=>{t.addEventListener("abort",()=>e(new DOMException("AbortError","AbortError")))})])}export const ensurePointInsideImage=(t,o,r)=>{const{width:e,height:x}=o.data;t.x=clamp(t.x,r,r+e),t.y=clamp(t.y,r,r+x)},getFromArray=(t,o)=>{if(t.length===0)throw new Error("getFromArray received array of length 0. How can I select something from this?");return t[Math.abs(o)%t.length]};
