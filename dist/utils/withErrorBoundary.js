import{captureEvent as u,captureException as l,eventFromException as a,withScope as d}from"../../snowpack/pkg/@sentry/browser.js";import{h as c}from"../../snowpack/pkg/preact.js";import{Component as m,isValidElement as y}from"../../snowpack/pkg/preact.js";const E="unknown",i={componentStack:null,error:null,eventId:null};function h(o,e){const n=new Error(o.message);n.name=`React ErrorBoundary ${n.name}`,n.stack=e;let t={};if(a({},n).then(r=>{t=r}),t.exception&&Array.isArray(t.exception.values)){let r={};return a({},o).then(s=>{r=s}),r.exception&&Array.isArray(r.exception.values)&&(r.exception.values=[...t.exception.values,...r.exception.values]),u(r)}return l(o,{contexts:{react:{componentStack:e}}})}class p extends m{constructor(){super(...arguments);this.state=i,this.resetErrorBoundary=()=>{this.setState(i)}}componentDidCatch(e){const{beforeCapture:n}=this.props,t="";d(r=>{n&&n(r,e,t);const s=h(e,t);this.setState({error:e,componentStack:t,eventId:s})})}render(){const{fallback:e}=this.props,{error:n,componentStack:t,eventId:r}=this.state;return n?y(e)?e:typeof e=="function"?e({error:n,componentStack:t,resetError:this.resetErrorBoundary,eventId:r}):null:this.props.children}}function f(o,e){const n=o.displayName||o.name||E,t=r=>c(p,{...e},c(o,{...r}));return t.displayName=`errorBoundary(${n})`,t}export{p as ErrorBoundary,f as withErrorBoundary};
