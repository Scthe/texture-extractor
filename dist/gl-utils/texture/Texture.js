import{assertUnreachable as m}from"../../utils/index.js";import n,{getGlConstName as x}from"../gimme_gl.js";import{getDepthStencilGlTexImageParams as E,isSizedTextureFormatInteger as c}from"./utils.js";export var TextureType;(function(s){s[s.Texture2d=n.TEXTURE_2D]="Texture2d",s[s.Texture3d=n.TEXTURE_3D]="Texture3d",s[s.Texture2dArray=n.TEXTURE_2D_ARRAY]="Texture2dArray"})(TextureType||(TextureType={}));const u=0;export class Texture{constructor(e,t,i,h,r,a){this.type=t,this.dimensions=i,this.mipmapLevels=h,this.sizedPixelFormat=r,this.opts=a,this.glId_=e.createTexture(),this.applyOptions(e,this.opts),this.allocate(e)}allocate(e){switch(this.checkAllocationSize(e),this.type){case TextureType.Texture2d:this.allocateTeture2d(e,this.type);return;case TextureType.Texture3d:case TextureType.Texture2dArray:e.texStorage3D(this.type,this.mipmapLevels+1,this.sizedPixelFormat,this.width,this.height,this.depth);return;default:m()}}allocateTeture2d(e,t){const i=E(e,this.sizedPixelFormat);i?e.texImage2D(t,0,i.internalformat,this.width,this.height,u,i.format,i.type,null):e.texStorage2D(t,this.mipmapLevels+1,this.sizedPixelFormat,this.width,this.height)}checkAllocationSize(e){const t=(i,h)=>{i.every(r=>r<=h)||console.warn(`Tried to allocate texture of size [${i.join(", ")}]px, while max for single dimension is ${h}px. This will not work correctly`)};switch(this.type){case TextureType.Texture2d:t([this.width,this.height],e.getParameter(e.MAX_TEXTURE_SIZE));break;case TextureType.Texture3d:t([this.width,this.height,this.depth],e.getParameter(e.MAX_3D_TEXTURE_SIZE));break;case TextureType.Texture2dArray:t([this.width,this.height],e.getParameter(e.MAX_TEXTURE_SIZE)),t([this.depth],e.getParameter(e.MAX_ARRAY_TEXTURE_LAYERS));break}}checkIntegerWrite(e){const t=c(this.sizedPixelFormat),i=x(e).endsWith("_INTEGER");t&&!i&&console.warn("Texture.write: Tried to write non _INTEGER texture data into texture that uses internally integers")}write(e,t,i,h){if(this.isDepth)throw"Tried to write into depth texture. What?";this.checkIntegerWrite(h.unsizedPixelFormat),this.bindAsActive(e);const{start:r,dimensions:a}=i,{unsizedPixelFormat:d,perChannelType:o,data:T}=h;switch(this.type){case TextureType.Texture2d:e.texSubImage2D(this.type,t,r[0],r[1],a[0],a[1],d,o,T);return;case TextureType.Texture3d:case TextureType.Texture2dArray:e.texSubImage3D(this.type,t,r[0],r[1],r[2],a[0],a[1],a[2],d,o,T);return;default:m();return}}get width(){return this.dimensions[0]}get height(){return this.dimensions[1]}get depth(){return this.dimensions[2]}get glId(){if(this.glId_==null)throw new Error(`Tried to use deleted texture with dimensions ${this.width}x${this.height}`);return this.glId_}get isDepth(){return[n.DEPTH_COMPONENT16,n.DEPTH24_STENCIL8].includes(this.sizedPixelFormat)}get isDepthStencil(){return[n.DEPTH24_STENCIL8].includes(this.sizedPixelFormat)}bindAsActive(e,t=0){e.activeTexture(e.TEXTURE0+t),e.bindTexture(this.type,this.glId)}destroy(e){e.deleteTexture(this.glId)}applyOptions(e,t){this.bindAsActive(e),e.texParameteri(this.type,e.TEXTURE_BASE_LEVEL,t.mipmapBaseLevel),e.texParameteri(this.type,e.TEXTURE_MAX_LEVEL,t.mipmapMaxLevel),e.texParameteri(this.type,e.TEXTURE_MIN_LOD,t.lodMin),e.texParameteri(this.type,e.TEXTURE_MAX_LOD,t.lodMax),e.texParameteri(this.type,e.TEXTURE_MIN_FILTER,t.filterMin),e.texParameteri(this.type,e.TEXTURE_MAG_FILTER,t.filterMag),e.texParameteri(this.type,e.TEXTURE_WRAP_R,t.wrap[0]),e.texParameteri(this.type,e.TEXTURE_WRAP_S,t.wrap[1]),e.texParameteri(this.type,e.TEXTURE_WRAP_T,t.wrap[2])}}
